openapi: 3.0.4
info:
  title: ET-Web API Documentation
  version: 1.0.0
  description: |-
    This is the API documentation for ET-Web application. The API provides endpoints for managing:
    - Achievements
    - Activities
    - News & Blogs
    - Partners
    - Personnel & Accounts
    - System Roles
    - FAQs
    - Banners
    - Terms

    For any questions or issues, please contact the development team.
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.etclub.click
    description: Production server
tags:
  - name: achievements
    description: Operations about achievements
  - name: activities
    description: Operations about activities
  - name: et-news
    description: Operations about ET news
  - name: et-blog
    description: Operations about ET blog
  - name: partners
    description: Operations about partners
  - name: personnels
    description: Operations about personnel management
  - name: accounts
    description: Operations about user accounts
  - name: system-role
    description: Operations about system roles
  - name: banners
    description: Operations about banners
  - name: faqs
    description: Operations about FAQs
  - name: terms
    description: Operations about terms
  - name: auth
    description: Operations about authentication
  - name: search
    description: Operations about search functionality
paths:
  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: "user@example.com"
              password: "12345678"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "Login successful"
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-token:
    post:
      tags:
        - auth
      operationId: refreshToken
      summary: Refresh JWT token
      description: Refresh the JWT token using the refresh token
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                status: 200
                message: "Token refreshed successfully"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Refresh token is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  message: "Refresh token is missing."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  message: "Invalid token type. Refresh token required."
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          format: username
          example: "lvc.event@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"
    SuccessResponse: #status 200
      type: object
      properties:
        message:
          type: string
          example: Success
        data:
          type: object
          nullable: true
          example:
            id: "123"
            title: "Morning Run"
            createdAt: "2025-08-01T10:20:30Z"
    CreatedResponse: #status 201
      type: object
      properties:
        message:
          type: string
          example: Resource created successfully
        data:
          type: object
          example:
            id: "123"
            title: "Morning Run"
    ErrorResponse: #status 400, 401, 404, 500
      type: object
      properties:
        message:
          type: string
          example: The 'username' field must be a valid username address
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
    
