openapi: 3.0.4
info:
  title: ET-Web API Documentation
  version: 1.0.0
  description: |-
    This is the API documentation for ET-Web application. The API provides endpoints for managing:
    - Achievements
    - Activities
    - News & Blogs
    - Partners
    - Personnel & Accounts
    - System Roles
    - FAQs
    - Banners
    - Terms

    For any questions or issues, please contact the development team.
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.etclub.click
    description: Production server
tags:
  - name: achievements
    description: Operations about achievements
  - name: activities
    description: Operations about activities
  - name: et-news
    description: Operations about ET news
  - name: et-blog
    description: Operations about ET blog
  - name: partners
    description: Operations about partners
  - name: personnels
    description: Operations about personnel management
  - name: accounts
    description: Operations about user accounts
  - name: system-role
    description: Operations about system roles
  - name: banners
    description: Operations about banners
  - name: faqs
    description: Operations about FAQs
  - name: terms
    description: Operations about terms
  - name: auth
    description: Operations about authentication
  - name: search
    description: Operations about search functionality
paths:
  /auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              username: "user@example.com"
              password: "12345678"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                message: "Login successful"
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/refresh-token:
    post:
      tags:
        - auth
      operationId: refreshToken
      summary: Refresh JWT token
      description: Refresh the JWT token using the refresh token
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: 200
                message: "Token refreshed successfully"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Refresh token is missing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                example:
                  message: "Refresh token is missing."
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                example:
                  message: "Invalid token type. Refresh token required."
  /banners:
    get:
      tags:
        - banners
      operationId: getAllBanners
      summary: Get all banners
      description: Retrieve a list of all banners
      responses:
        "200":
          description: Successful retrieval of banners
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/banners"
              example:
                - banner_name: "Welcome Banner"
                  image_url: "https://example.com/banner.jpg"
                  visible: true
        "404":
          description: No banners found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - banners
      operationId: createBanner
      summary: Create a new banner
      description: Create a new banner with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/banners"
            example:
              banner_name: "New Banner"
              image_url: "https://example.com/new-banner.jpg"
              visible: true
      responses:
        "201":
          description: Banner created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /banners/{id}:
    get:
      tags:
        - banners
      operationId: getBannerById
      summary: Get banner by ID
      description: Retrieve a specific banner by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the banner to retrieve
      responses:
        "200":
          description: Successful retrieval of banner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/banners"
              example:
                banner_name: "Welcome Banner"
                image_url: "https://example.com/banner.jpg"
                visible: true
        "404":
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - banners
      operationId: updateBanner
      summary: Update an existing banner
      description: Update the details of an existing banner
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the banner to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/banners"
            example:
              banner_name: "Updated Banner"
              image_url: "https://example.com/updated-banner.jpg"
              visible: true
      responses:
        "200":
          description: Banner updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - banners
      operationId: deleteBanner
      summary: Delete a banner
      description: Delete a specific banner by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the banner to delete
      responses:
        "204":
          description: Banner deleted successfully
        "404":
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /banners/bulk-delete:
    delete:
      tags:
        - banners
      operationId: bulkDeleteBanners
      summary: Bulk delete banners
      description: Delete multiple banners at once
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["banner1", "banner2"]
      responses:
        "204":
          description: Banners deleted successfully
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    banners:
      type: object
      properties:
        banner_name:
          type: string
          example: "Welcom Banner"
        image_url:
          type: string
          format: uri
          example: "https://example.com/banner.jpg"
        visible:
          type: boolean
          example: "Indicates whether the banner is visible"

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          format: username
          example: "lvc.event@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"
    SuccessResponse: #status 200
      type: object
      properties:
        message:
          type: string
          example: Success
        data:
          type: object
          nullable: true
          example:
            id: "123"
            title: "Morning Run"
            createdAt: "2025-08-01T10:20:30Z"
    CreatedResponse: #status 201
      type: object
      properties:
        message:
          type: string
          example: Resource created successfully
        data:
          type: object
          example:
            id: "123"
            title: "Morning Run"
    ErrorResponse: #status 400, 401, 404, 500
      type: object
      properties:
        message:
          type: string
          example: The 'username' field must be a valid username address
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
